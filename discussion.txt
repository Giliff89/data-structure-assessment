Runtime Discussion questions:

1) When calculating the Big O notation for a particular algorithm, it’s necessary
to consider the length of time it takes for the algorithm to run as the
algorithm’s workload approaches infinity. You can think of the workload as the
number of tasks required to complete a job. What determines the workload of
figuring out whether your box of animal crackers contains an elephant?

The workload is determined by the number of animal crackers in the box

2) Order the following runtimes in descending order of efficiency (that is, fastest
runtimes first, slowest last) as n approaches infinity:
1 - O(1)
2 - O(log n)
3 - O(n)
4 - O(n log n)
5 - O(n^2)
6 - O(2^n)


Stacks and Queues Discussion questions:

1) In the following cases, would a stack or queue be a more appropriate data structure?

    1a) The process of loading and unloading pallets onto a flatbed truck
        Stack

    1b) Putting bottle caps on bottles of beer as they roll down an assembly line
        Queue

    1c) Calculating the solution to this mathematical expression: 2 + (7 * 4) - (3 / 2)
        Stack

2) Describe two more situations where a queue would be an appropriate data structure.
        Using produce in a restaurant
        Serving customers coffee at a cafe

3) Describe two more situations where a stack would be an appropriate data structure.
        Back button on a browser
        Washing a stack of dishes piled in a sink


Linked List Discussion questions:

1) Given the linked list below, which are the nodes? What is the data for each node?
Where is the head? Where is the tail? (Please be as specific as possible
exactly which parts of the diagram correspond to each part? Arrows? Boxes? Text?)

The nodes are "Apple", "Berry", "Cherry". The data for each is the string, so
"Apple", "Berry", and "Cherry" are the data for the nodes. The head is pointing
to "Apple", and the tail is pointing to "Cherry". Each node is connected to the
next by pointing via an arrow to the next node.

2) What’s the difference between doubly- and singly-linked lists?

A doubly-linked list points both forwards and backwards, so you can traverse
the list in either direction. This allows it to be used as a double ended queue,
or a deque. A singly-linked list only allows you to move forward, so you can
only go from the head towards the tail node.

3) Why is it faster to append to a linked list if we keep track of the tail as
an attribute?

If you have a tail attribute that tracks the tail of the list, you never have to
traverse the list to append to the end. This makes the runtime constant, or O(1).


Tree Discussion Questions:

1) Given the tree above, in what order would a Breadth First Search (BFS)
algorithm visit each node until finding burritos (starting at food)? Just list
the order of nodes visited; no need to recreate the state of the algorithm data
in your answer.

Food -> Mexican -> Indian -> Italian -> enchiladas -> tacos -> burritos

2) Given the tree above, in what order would a Depth First Search (DFS)
algorithm visit each node until finding Chicago-style (starting at food)? Just
list the order of nodes visited; no need to recreate the state of the algorithm
data in your answer.

Food -> Italian -> lasagna -> pizza -> thin crust -> Chicago-style

3) How is a binary search tree different from other trees?

A binary search tree is balanced and has a rule for arrangement so that a search
can occur very quickly in as few steps as possible. For each node it can have
two children, with the one on the left being of lower value than the parent and
the one on the right being of higher value than the parent. This way the algorithm
always knows where to look to get closer to the desired value.